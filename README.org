#+TITLE: Cubes!

* Progress
- [X] 2x2
- [X] 3x3
- [ ] Displaying step-by-step from svgs

* Genreal
** Usage 
The program has three options: =gen=, =solve=, =rand=.

To input a specific 2x2 (or 3x3) into the program, you must =cargo run --release --bin tubaitu -- gen= (=cargo run --release --bin tubaitu -- gen=). Note the space before the =--=!

You should now have a file called =tubaitu_input_file= (or =tribaitri_input_file=). Input your state into it, replacing all =X= with any of =W=, =Y=, =R=, =O=, =B=, =G= as appropriate.

Now, to get a solve, run =cargo run --release --bin tubaitu -- solve= (or =cargo run --release --bin tribaitri -- solve=)

To use a random scramble instead, use =cargo run --release --bin tubaitu -- rand= (=cargo run --release --bin tribaitri=)

** Solving
Solving is done by brute force: we generate a graph where the vertexes are a unique (modulo symmetry) cube state and each edge is the corresponding move. We may then traverse the graph via two BFS (starting from the solved state and the unsolved state) until they both encounter the same state. Having reached this point, getting the path is trivial.

** Adding cubes
Inside the =shared= package, the =Solvable= trait is defined. When implementing it on a type, only =T::make_move()= and =moves_of_adjacency()= are missing members (for changing state and finding all adjacent states, respectively). The function =T::solve()= is autogenerated from those via generics, though of course it may be replaced by implementing it normally. As convenience, the methods =T::scramble= and =T::random_scramble()= also contain default implementations.

* Tubaitu
** Internal representation
Each 2x2 cube is represented by eight pieces, each of which has six color (three of them are visible at any one time). This makes rotations easier to compute.

These eight pieces with their corresponding six colors are represented by an array of eight and six elements respectively. The position of each element in the array has been (arbitrarily) decided to be this one:

*** Cube's representation (8 pieces)

- 0: Top right front
- 1: Top right back
- 2: Top left back
- 3: Top left front
- 4: Bottom right front
- 5: Bottom right back
- 6: Bottom left back
- 7: Bottom left front

This is stored internally as a C-style (unit) enum.

** Piece (6 colors)
#+BEGIN_SRC txt
         +--------+   
        /        /|     
       /    2   / |  < -- 4  (the back)  
      +--------+  |     
      |        | 0|     
      |        |  +     
3 ->  |   1    | /      
      |        |/  ^      
      +--------+   |-- 5     
#+END_SRC

As in:
- 0: Right
- 1: Front
- 2: Top
- 3: Left
- 4: Back
- 5: Down

This is stored internally as a C-style (unit) enum.

