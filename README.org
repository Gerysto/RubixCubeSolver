#+TITLE: Rubix Cube Solver

* Usage

The program has two options: =gen= and =solve=.

To input a specific 2x2 into the program, you must =cargo run -- gen= (or =./tubaitu gen=).

You should now have a file called =tubaitu_input_file=. Input your state into it, replacing all =X= with any of =W=, =Y=, =R=, =O=, =B=, =G= as appropriate.

Now, to get a solve, run =cargo run -- solve= (or =./tubaitu solve=)

* Internal representation

Each 2x2 cube is represented by eight pieces, each of which has six color (three of them are visible at any one time). This makes rotations easier to compute.

These eight pieces with their corresponding six colors are represented by an array of eight and six elements respectively. The position of each element in the array has been (arbitrarily) decided
to be this one:

** Cube (8 pieces)

TODO: Add ASCII diagram (I'm not sure how to draw eight boxes, especially when some hide parts of others)

As in:
- 0: Top right front
- 1: Top right back
- 2: Top left back
- 3: Top left front
- 4: Bottom right front
- 5: Bottom right back
- 6: Bottom left back
- 7: Bottom left front

** Piece (6 colors)
#+BEGIN_SRC txt
         +--------+   
        /        /|     
       /    2   / |  < -- 4  (the back)  
      +--------+  |     
      |        | 0|     
      |        |  +     
3 ->  |   1    | /      
      |        |/  ^      
      +--------+   |-- 5     
#+END_SRC

As in:
- 0: Right
- 1: Front
- 2: Top
- 3: Left
- 4: Back
- 5: Down

* Solving
Solving is done by brute force: we generate a graph where the vertexes are a unique (modulo symmetry) cube state and each edge is the corresponding move. We may then traverse the graph via two BFS (starting from the solved state and the unsolved state) until they both encounter the same state. Having reached this point, getting the path is trivial.


* TODO
Rewrite the arbitrary representation indexes as constants/enums
